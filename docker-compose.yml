networks:
  internal:
    driver: bridge

volumes:
  database-data:
    driver: local

services:
  database:
    image: postgres:17.2-bookworm
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["postgres", "-c", "log_statement=all"]
    expose:
      - "5432"
    networks:
      - internal

    volumes:
      - database-data:/var/lib/postgresql/data

  cache:
    image: redis:7.4.1-bookworm
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "6379"
    networks:
      - internal

  migration:
    image: ghcr.io/tectek-solutions/scac:migration-latest
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
    networks:
      - internal
    depends_on:
      database:
        condition: service_healthy

  actions-service:
    image: ghcr.io/tectek-solutions/scac:actions-service-latest
    expose:
      - "8000"
    environment:
      RUST_LOG: debug
      BINDING_ADDRESS: 0.0.0.0
      BINDING_PORT: 8000
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      REDIS_URL: redis://cache:6379
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - internal
    depends_on:
      - migration
      - cache

  apis-service:
    image: ghcr.io/tectek-solutions/scac:apis-service-latest
    expose:
      - "8000"
    environment:
      RUST_LOG: debug
      BINDING_ADDRESS: 0.0.0.0
      BINDING_PORT: 8000
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      REDIS_URL: redis://cache:6379
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - internal
    depends_on:
      - migration
      - cache

  authentications-service:
    image: ghcr.io/tectek-solutions/scac:authentications-service-latest
    expose:
      - "8000"
    environment:
      RUST_LOG: debug
      BINDING_ADDRESS: 0.0.0.0
      BINDING_PORT: 8000
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      REDIS_URL: redis://cache:6379
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - internal
    depends_on:
      - migration
      - cache

  reactions-service:
    image: ghcr.io/tectek-solutions/scac:reactions-service-latest
    expose:
      - "8000"
    environment:
      RUST_LOG: debug
      BINDING_ADDRESS: 0.0.0.0
      BINDING_PORT: 8000
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      REDIS_URL: redis://cache:6379
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - internal
    depends_on:
      - migration
      - cache

  trigger-service:
    image: ghcr.io/tectek-solutions/scac:trigger-service-latest
    expose:
      - "8000"
    environment:
      RUST_LOG: debug
      BINDING_ADDRESS: 0.0.0.0
      BINDING_PORT: 8000
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      REDIS_URL: redis://cache:6379
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - internal
    depends_on:
      - migration
      - cache

  user-tokens-service:
    image: ghcr.io/tectek-solutions/scac:user-tokens-service-latest
    expose:
      - "8000"
    environment:
      RUST_LOG: debug
      BINDING_ADDRESS: 0.0.0.0
      BINDING_PORT: 8000
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      REDIS_URL: redis://cache:6379
      JWT_SECRET: ${JWT_SECRET}
      API_URL: http://localhost:8000
      CLIENT_URL: http://localhost:3000
    networks:
      - internal
    depends_on:
      - migration
      - cache

  users-service:
    image: ghcr.io/tectek-solutions/scac:users-service-latest
    expose:
      - "8000"
    environment:
      RUST_LOG: debug
      BINDING_ADDRESS: 0.0.0.0
      BINDING_PORT: 8000
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      REDIS_URL: redis://cache:6379
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - internal
    depends_on:
      - migration
      - cache


  workflows-service:
    image: ghcr.io/tectek-solutions/scac:workflows-service-latest
    expose:
      - "8000"
    environment:
      RUST_LOG: debug
      BINDING_ADDRESS: 0.0.0.0
      BINDING_PORT: 8000
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      REDIS_URL: redis://cache:6379
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - internal
    depends_on:
      - migration
      - cache

  api-gateway:
    image: ghcr.io/tectek-solutions/scac:api-gateway-latest
    ports:
      - "8000:8000"
    environment:
      RUST_LOG: debug
      BINDING_ADDRESS: 0.0.0.0
      BINDING_PORT: 8000
      ACTIONS_SERVICE_ADDRESS: actions-service
      ACTIONS_SERVICE_PORT: 8000
      APIS_SERVICE_ADDRESS: apis-service
      APIS_SERVICE_PORT: 8000
      AUTHENTICATIONS_SERVICE_ADDRESS: authentications-service
      AUTHENTICATIONS_SERVICE_PORT: 8000
      REACTIONS_SERVICE_ADDRESS: reactions-service
      REACTIONS_SERVICE_PORT: 8000
      TRIGGER_SERVICE_ADDRESS: trigger-service
      TRIGGER_SERVICE_PORT: 8000
      USER_TOKENS_SERVICE_ADDRESS: user-tokens-service
      USER_TOKENS_SERVICE_PORT: 8000
      USERS_SERVICE_ADDRESS: users-service
      USERS_SERVICE_PORT: 8000
      WORKFLOWS_SERVICE_ADDRESS: workflows-service
      WORKFLOWS_SERVICE_PORT: 8000
    networks:
      - internal
    depends_on:
      - actions-service
      - apis-service
      - authentications-service
      - reactions-service
      - trigger-service
      - user-tokens-service
      - users-service
      - workflows-service
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/authentications/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  client:
    image: ghcr.io/tectek-solutions/scac:client-latest
    ports:
      - "3000:3000"
    environment:
      API_URL: http://localhost:8000
      CLIENT_URL: http://localhost:8000
    networks:
      - internal
    depends_on:
      - api-gateway

