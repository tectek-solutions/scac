name: Docker Image Workflow Template

on:
  workflow_call:
    inputs:
      dockerfile:
        description: "Path to the Dockerfile"
        required: true
        type: string
      image_name:
        description: "Name of the Docker image (including registry URL)"
        required: true
        type: string
      context:
        description: "The context to use for the build"
        required: true
        type: string
      push_on_main:
        description: "Whether to push the image when changes are merged to main"
        required: false
        default: true
        type: boolean
      api_url:
        description: "API URL"
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
        with:
          buildkitd-flags: --allow-insecure-entitlement security.insecure

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-docker-${{ github.ref }}
            ${{ runner.os }}-docker

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name == 'push' }}
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set Build Mode
        id: build_mode
        run: echo "mode=$([[ '${{ github.event_name }}' == 'pull_request' ]] && echo '--load' || echo '--push')" >> $GITHUB_ENV

      - name: Build and Push Multi-Architecture Docker Image
        run: |
          docker buildx build \
            --file ${{ inputs.dockerfile }} \
            --tag ${{ inputs.image_name }} \
            ${{ inputs.api_url && '--build-arg API_URL=${{ inputs.api_url }}' || '' }} \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            ${{ env.mode }} \
            ${{ inputs.context }}
